(function($){
	$.fn.imagesUpload = function(opt){
		var me = this;
		function fileErr(e, info){
			if(!opt.multiple){
				me.val("");
				e.stopImmediatePropagation();
				e.preventDefault();
			}
			try{
				opt.error.call(e.target, info);
			}catch(ex){}
		}
		function fileResult(e, info, img){
			opt.callback.call(e.target, info, img);
		}
		if(this[0].files && !opt.multiple){
			//console.log(me);

			return me.change(function(e) {
				//console.log(e);
				console.log(this);
				console.log(this.files);
				$.each(this.files, function(){

					var img = this, url;
					if(img.type && !/^image\//.test(img.type)){
						fileErr(e, img);
						return;
					}
					try{
						url = (window.URL || webkitURL).createObjectURL(img);
					}catch(ex){}
					if(!opt.multiple && url){
						fileResult(e, img, url);
					} else {
						var reader = new FileReader();
						reader.onload = function (){
							img.url = url || reader.result;
							fileResult(e, img, opt.multiple ? $("<input>", {
								type: "hidden",
								value: reader.result
							}) : img.url);
						}
						reader.readAsDataURL(img);
					}
				});
				if(opt.multiple){
					this.value = "";
				}
			}).attr({
				accept: "image/*",
				multiple: opt.multiple
			});
		} else {
			return me.change(function(e) {
				var info = this.files ? this.files[0] : {
					name: this.value.substr(this.value.lastIndexOf("\\") + 1)
				};
				if((this.files && !/^image\//.test(this.files[0].type)) || !/.(jpg|gif|jpeg|png)$/i.test(info.name)){
					fileErr(e, info);
					return;
				}
				if(opt.multiple){
					var node = $(this);
					node.replaceWith(node.clone(true).val(""));
					fileResult(e, info, node.unbind("change").attr({
						"class": "",
						id: ""
					}).remove());
				} else {
					fileResult(e, info);
				}
			});
		}
	}
})(jQuery);